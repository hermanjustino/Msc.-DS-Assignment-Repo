filter(!is.na(Longitude) & !is.na(Latitude)) %>%
mutate(incident_occurred = ifelse(!is.na(INCIDENT_KEY), 1, 0))
# Split the data into training and testing sets
set.seed(123)
trainIndex <- sample(seq_len(nrow(nypd_data_filtered)), size = 0.8 * nrow(nypd_data_filtered))
nypd_train <- nypd_data_filtered[trainIndex, ]
nypd_test  <- nypd_data_filtered[-trainIndex, ]
# Feature engineering (you can add more features as needed)
nypd_train$longitude <- nypd_train$Longitude
nypd_train$latitude <- nypd_train$Latitude
nypd_test$longitude <- nypd_test$Longitude
nypd_test$latitude <- nypd_test$Latitude
# Train Logistic Regression model
logistic_model <- glm(incident_occurred ~ longitude + latitude,
data = nypd_train,
family = binomial)
# Train Random Forest model using ranger
random_forest_model <- ranger(incident_occurred ~ longitude + latitude,
data = nypd_train,
probability = TRUE)
# Predict on test data
logistic_predictions <- predict(logistic_model, newdata = nypd_test, type = "response")
logistic_predictions <- ifelse(logistic_predictions > 0.5, 1, 0)
random_forest_predictions <- predict(random_forest_model, data = nypd_test)$predictions
random_forest_predictions <- ifelse(random_forest_predictions[, 2] > 0.5, 1, 0)
us_state_totals_predictions %>% ggplot() +
geom_point(aes(x = cases_per_thou, y = deaths_per_thou), color = "blue") +
geom_point(aes(x = cases_per_thou, y = pred), color = "red")
file_path <- "../datasets/census.csv"
if (file.exists(file_path)) {
census_data <- read.csv(file_path)
} else {
stop("File not found: ", file_path)
}
file_path <- "../datasets/census.csv"
if (file.exists(file_path)) {
census_data <- read.csv(file_path)
} else {
stop("File not found: ", file_path)
}
summary(census_data)
head(census_data, 5)
file_path <- "../datasets/census.csv"
if (file.exists(file_path)) {
census_data <- read.csv(file_path)
} else {
stop("File not found: ", file_path)
}
summary(census_data)
head(census_data, 15)
# Select the columns with borough names and their population estimates
population_estimates <- census_data %>%
select(`Fact`, `New York County, New York`, `Richmond County, New York`, `Kings County, New York`, `Queens County, New York`, `Bronx County, New York`, `New York city, New York`) %>%
filter(Fact == "Population estimates, July 1, 2023, (V2023)")
file_path <- "../datasets/census.csv"
if (file.exists(file_path)) {
census_data <- read.csv(file_path)
} else {
stop("File not found: ", file_path)
}
summary(census_data)
head(census_data, 15)
summary(nypd_data)
head(nypd_data, 5)
# Select the columns with borough names and their population estimates
population_estimates <- census_data %>%
select(Fact, New.York.County..New.York, Richmond County, New York, Kings County, New York, Queens County, New York, Bronx County, New York, New York city, New York) %>%
# Select the columns with borough names and their population estimates
population_estimates <- census_data %>%
select('Fact', 'New.York.County..New.York', 'Richmond County, New York', 'Kings County, New York', 'Queens County, New York) %>%
filter(Fact == "Population estimates, July 1, 2023, (V2023)")
# Print the selected row
print(population_estimates)
# Select the columns with borough names and their population estimates
population_estimates <- census_data %>%
select('Fact', 'New.York.County..New.York', 'Richmond County, New York', 'Kings County, New York', 'Queens County, New York') %>%
filter(Fact == "Population estimates, July 1, 2023, (V2023)")
# Select the columns with borough names and their population estimates
population_estimates <- census_data %>%
select(`Fact`, `New.York.County..New.York`, `Richmond County, New York`, `Kings County, New York`, `Queens County, New York`, `Bronx County, New York`, `New York city, New York`) %>%
filter(Fact == "Population estimates, July 1, 2023, (V2023)")
# Select the columns with borough names and their population estimates
population_estimates <- census_data %>%
select(`Fact`, `New.York.County..New.York`, `Richmond.County..New.York`, `Kings.County..New.York`, `Queens.County..New.York`, `Bronx.County..New.York`, `New.York.city..New.York`) %>%
filter(Fact == "Population estimates, July 1, 2023, (V2023)")
# Print the selected row
print(population_estimates)
# Summarize data to calculate crime rate by borough
borough_summary <- nypd_data %>%
filter(!is.na(BORO)) %>%
group_by(BORO) %>%
summarise(crime_count = n()) %>%
mutate(crime_rate = crime_count / sum(crime_count) * 100)
# Create bar chart for crime rate by borough
ggplot(borough_summary, aes(x = reorder(BORO, -crime_rate), y = crime_rate, fill = BORO)) +
geom_bar(stat = "identity") +
geom_text(aes(label = paste0(round(crime_rate, 1), "%")), vjust = -0.5) +
labs(title = "Percentage of Crime by Borough", x = "Borough", y = "Percentage of All Crime (%)") +
theme_minimal()
# Summarize data to calculate crime rate by borough
borough_summary <- nypd_data %>%
filter(!is.na(BORO)) %>%
group_by(BORO) %>%
summarise(crime_count = n()) %>%
mutate(crime_rate = crime_count / sum(crime_count) * 100)
# Create bar chart for crime rate by borough
ggplot(borough_summary, aes(x = reorder(BORO, -crime_rate), y = crime_rate, fill = BORO)) +
geom_bar(stat = "identity") +
geom_text(aes(label = paste0(round(crime_rate, 1), "%")), vjust = -0.5) +
labs(title = "Percentage of Crime by Borough", x = "Borough", y = "Percentage of All Crime (%)") +
theme_minimal()
library(ggplot2)
# Summarize data to calculate crime rate by borough
borough_summary <- nypd_data %>%
filter(!is.na(BORO)) %>%
group_by(BORO) %>%
summarise(crime_count = n()) %>%
mutate(crime_rate = crime_count / sum(crime_count) * 100)
# Create bar chart for crime rate by borough
ggplot(borough_summary, aes(x = reorder(BORO, -crime_rate), y = crime_rate, fill = BORO)) +
geom_bar(stat = "identity") +
geom_text(aes(label = paste0(round(crime_rate, 1), "%")), vjust = -0.5) +
labs(title = "Percentage of Crime by Borough", x = "Borough", y = "Percentage of All Crime (%)") +
theme_minimal()
# Select relevant columns and filter out rows with NA or invalid values
library(dplyr)
nypd_data_filtered <- nypd_data %>%
select(OCCUR_TIME) %>%
filter(!is.na(OCCUR_TIME))
# Convert OCCUR_TIME to a suitable format
nypd_data_filtered$hour <- as.numeric(substr(nypd_data_filtered$OCCUR_TIME, 1, 2))
library(ggplot2)
crime_time_plot <- nypd_data_filtered %>%
group_by(hour) %>%
summarise(count = n()) %>%
ggplot(aes(x = hour, y = count)) +
geom_line() +
scale_x_continuous(breaks = seq(0, 23, by = 2)) +
labs(title = "Distribution of Crimes at Different Times of the Day",
x = "Hour of the Day",
y = "Number of Incidents") +
theme_minimal()
# Print the plot
print(crime_time_plot)
crime_totals <- nypd_data %>%
filter(!is.na(BORO)) %>%
group_by(BORO) %>%
summarise(total = sum(crime_count) %>%
select(boro, total) %>%
ungroup()
crime_totals <- nypd_data %>%
group_by(BORO) %>%
summarise(total = sum(crime_count) %>%
select(boro, total) %>%
ungroup()
crime_totals <- nypd_data %>%
group_by(BORO) %>%
summarise(total = sum(crime_count)) %>%
select(boro, total) %>%
ungroup()
# Select relevant columns and filter out rows with NA or invalid values
library(dplyr)
nypd_data_filtered <- nypd_data %>%
select(Longitude, Latitude, INCIDENT_KEY) %>%
filter(!is.na(Longitude) & !is.na(Latitude) & Longitude >= -180 & Longitude <= 180 & Latitude >= -90 & Latitude <= 90)
# Select the columns with borough names and their population estimates
population_estimates <- census_data %>%
select(`Fact`, `New.York.County..New.York`, `Richmond.County..New.York`, `Kings.County..New.York`, `Queens.County..New.York`, `Bronx.County..New.York`, `New.York.city..New.York`) %>%
filter(Fact == "Population estimates, July 1, 2023, (V2023)")
# Print the selected row
print(population_estimates)
library(dplyr)
library(knitr)
# Summarize data to calculate the number of crimes by borough
borough_crime_summary <- nypd_data %>%
filter(!is.na(BORO)) %>%
group_by(BORO) %>%
summarise(crime_count = n()) %>%
arrange(desc(crime_count))
# Display the summary as a table
kable(borough_crime_summary, col.names = c("Borough", "Number of Crimes"), caption = "Number of Crimes by Borough")
# Select the columns with borough names and their population estimates
population_estimates <- census_data %>%
select(`Fact`, `New.York.County..New.York`, `Richmond.County..New.York`, `Kings.County..New.York`, `Queens.County..New.York`, `Bronx.County..New.York`, `New.York.city..New.York`) %>%
filter(Fact == "Population estimates, July 1, 2023, (V2023)")
# Rename columns to match the names in the crime data
census_data <- census_data %>%
rename(
MANHATTAN = `New.York.County..New.York`,
STATEN_ISLAND = `Richmond.County..New York`,
BROOKLYN = `Kings.County..New.York`,
QUEENS = `Queens.County..New.York`,
BRONX = `Bronx.County..New.York`,
NYC = `New York.city..New.York`
)
# Select the columns with borough names and their population estimates
population_estimates <- census_data %>%
select(`Fact`, `New.York.County..New.York`, `Richmond.County..New.York`, `Kings.County..New.York`, `Queens.County..New.York`, `Bronx.County..New.York`, `New.York.city..New.York`) %>%
filter(Fact == "Population estimates, July 1, 2023, (V2023)")
# Rename columns to match the names in the crime data
census_data <- census_data %>%
rename(
MANHATTAN = `New.York.County..New.York`,
STATEN_ISLAND = `Richmond.County..New.York`,
BROOKLYN = `Kings.County..New.York`,
QUEENS = `Queens.County..New.York`,
BRONX = `Bronx.County..New.York`,
NYC = `New York.city..New.York`
)
# Select the columns with borough names and their population estimates
population_estimates <- census_data %>%
select(`Fact`, `New.York.County..New.York`, `Richmond.County..New.York`, `Kings.County..New.York`, `Queens.County..New.York`, `Bronx.County..New.York`, `New.York.city..New.York`) %>%
filter(Fact == "Population estimates, July 1, 2023, (V2023)")
# Rename columns to match the names in the crime data
census_data <- census_data %>%
rename(
MANHATTAN = `New.York.County..New.York`,
STATEN_ISLAND = `Richmond.County..New.York`,
BROOKLYN = `Kings.County..New.York`,
QUEENS = `Queens.County..New.York`,
BRONX = `Bronx.County..New.York`,
NYC = `New.York.city..New.York`
)
# Select the row with population estimates for all the boroughs
population_estimates <- census_data %>%
filter(Fact == "Population estimates, July 1, 2023, (V2023)") %>%
select(Fact, MANHATTAN, STATEN_ISLAND, BROOKLYN, QUEENS, BRONX, NYC)
# Print the selected row
print(population_estimates)
library(dplyr)
library(knitr)
# Summarize data to calculate the number of crimes by borough
borough_crime_summary <- nypd_data %>%
filter(!is.na(BORO)) %>%
group_by(BORO) %>%
summarise(crime_count = n()) %>%
arrange(desc(crime_count))
# Display the summary as a table
kable(borough_crime_summary, col.names = c("Borough", "Number of Crimes"), caption = "Number of Crimes by Borough")
mod <- lm(deaths_per_thou ~ cases_per_thou, data = us_state_totals)
library(dplyr)
library(knitr)
# Summarize data to calculate the number of crimes by borough
borough_crime_summary <- nypd_data %>%
filter(!is.na(BORO)) %>%
group_by(BORO) %>%
summarise(crime_count = n()) %>%
arrange(desc(crime_count))
# Display the summary as a table
kable(borough_crime_summary, col.names = c("Borough", "Number of Crimes"), caption = "Number of Crimes by Borough")
library(dplyr)
library(knitr)
# Summarize data to calculate the number of crimes by borough
borough_crime_summary <- nypd_data %>%
filter(!is.na(BORO)) %>%
group_by(BORO) %>%
summarise(crime_count = n()) %>%
arrange(desc(crime_count))
# Convert population estimates to numeric
population_estimates <- population_estimates %>%
mutate(across(MANHATTAN:NYC, ~ as.numeric(gsub(",", "", .))))
# Calculate crime rates per 100,000 people
crime_rates <- borough_crime_summary %>%
mutate(
population = case_when(
BORO == "MANHATTAN" ~ population_estimates$MANHATTAN,
BORO == "STATEN ISLAND" ~ population_estimates$STATEN_ISLAND,
BORO == "BROOKLYN" ~ population_estimates$BROOKLYN,
BORO == "QUEENS" ~ population_estimates$QUEENS,
BORO == "BRONX" ~ population_estimates$BRONX,
TRUE ~ NA_real_
),
crime_rate_per_100k = (crime_count / population) * 100000
)
# Display the summary as a table
kable(crime_rates, col.names = c("Borough", "Number of Crimes", "Population", "Crime Rate per 100,000"), caption = "Crime Rates by Borough")
# Create a bar chart for crime rates by borough
crime_rate_plot <- ggplot(crime_rates, aes(x = reorder(BORO, -crime_rate_per_100k), y = crime_rate_per_100k, fill = BORO)) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(crime_rate_per_100k, 1)), vjust = -0.5) +
labs(title = "Crime Rates by Borough", x = "Borough", y = "Crime Rate per 100,000") +
theme_minimal()
# Print the plot
print(crime_rate_plot)
library(dplyr)
library(ggplot2)
library(knitr)
# Summarize data to calculate the number of crimes by borough
borough_crime_summary <- nypd_data %>%
filter(!is.na(BORO)) %>%
group_by(BORO) %>%
summarise(crime_count = n()) %>%
arrange(desc(crime_count))
# Display the summary as a table
kable(borough_crime_summary, col.names = c("Borough", "Number of Crimes"), caption = "Number of Crimes by Borough")
# Create a line chart for the number of crimes by borough
crime_line_chart <- ggplot(borough_crime_summary, aes(x = reorder(BORO, -crime_count), y = crime_count, group = 1)) +
geom_line() +
geom_point() +
labs(title = "Number of Crimes by Borough", x = "Borough", y = "Number of Crimes") +
theme_minimal()
# Print the plot
print(crime_line_chart)
library(dplyr)
library(ggplot2)
library(knitr)
# Summarize data to calculate the number of crimes by borough
borough_crime_summary <- nypd_data %>%
filter(!is.na(BORO)) %>%
group_by(BORO) %>%
summarise(crime_count = n()) %>%
arrange(desc(crime_count))
# Display the summary as a table
kable(borough_crime_summary, col.names = c("Borough", "Number of Crimes"), caption = "Number of Crimes by Borough")
# Create a line chart for the number of crimes by borough
crime_line_chart <- ggplot(borough_crime_summary, aes(x = reorder(BORO, -crime_count), y = crime_count, group = 1)) +
geom_line() +
geom_point() +
labs(title = "Number of Crimes by Borough", x = "Borough", y = "Number of Crimes") +
theme_minimal()
# Print the plot
print(crime_line_chart)
library(dplyr)
library(ggplot2)
library(knitr)
# Create a line chart for crime rates by borough
crime_rate_plot <- ggplot(crime_rates, aes(x = reorder(BORO, -crime_rate_per_100k), y = crime_rate_per_100k, group = 1)) +
geom_line() +
geom_point() +
labs(title = "Crime Rates by Borough", x = "Borough", y = "Crime Rate per 100,000") +
theme_minimal()
# Print the plot
print(crime_rate_plot)
file_path <- "../datasets/NYPD_Shooting_Incident_Data__Historic_.csv"
if (file.exists(file_path)) {
nypd_data <- read.csv(file_path)
} else {
stop("File not found: ", file_path)
}
file_path <- "../datasets/NYPD_Shooting_Incident_Data__Historic_.csv"
if (file.exists(file_path)) {
nypd_data <- read.csv(file_path)
} else {
stop("File not found: ", file_path)
}
file_path <- "NYPD_Shooting_Incident_Data__Historic_.csv"
if (file.exists(file_path)) {
nypd_data <- read.csv(file_path)
} else {
stop("File not found: ", file_path)
}
file_path <- "../datasets/NYPD_Shooting_Incident_Data__Historic_.csv"
if (file.exists(file_path)) {
nypd_data <- read.csv(file_path)
} else {
stop("File not found: ", file_path)
}
file_path <- "../datasets/NYPD_Shooting_Incident_Data__Historic_.csv"
if (file.exists(file_path)) {
nypd_data <- read.csv(file_path)
} else {
stop("File not found: ", file_path)
}
install.packages("shiny")
install.packages("shiny")
library(shiny)
library(leaflet)
# Convert OCCUR_DATE to Date type and extract year
nypd_data_filtered$OCCUR_DATE <- as.Date(nypd_data_filtered$OCCUR_DATE, format="%m/%d/%Y")
# Select relevant columns and filter out rows with NA or invalid values
library(dplyr)
nypd_data_filtered <- nypd_data %>%
select(Longitude, Latitude, INCIDENT_KEY) %>%
filter(!is.na(Longitude) & !is.na(Latitude) & Longitude >= -180 & Longitude <= 180 & Latitude >= -90 & Latitude <= 90)
library(shiny)
library(leaflet)
# Convert OCCUR_DATE to Date type and extract year
nypd_data_filtered$OCCUR_DATE <- as.Date(nypd_data_filtered$OCCUR_DATE, format="%m/%d/%Y")
library(leaflet)
# Create a leaflet map
leaflet(nypd_data_filtered) %>%
addTiles() %>%
addCircleMarkers(~Longitude, ~Latitude, popup = ~as.character(INCIDENT_KEY), color = "red", radius = 5)
library(shiny)
library(leaflet)
# Convert OCCUR_DATE to Date type and extract year
nypd_data_filtered$OCCUR_DATE <- as.Date(nypd_data_filtered$OCCUR_DATE, format="%m/%d/%Y")
# Select relevant columns and filter out rows with NA or invalid values
library(dplyr)
nypd_data_filtered <- nypd_data %>%
select(Longitude, Latitude, INCIDENT_KEY) %>%
filter(!is.na(Longitude) & !is.na(Latitude) & Longitude >= -180 & Longitude <= 180 & Latitude >= -90 & Latitude <= 90)
# Select relevant columns and filter out rows with NA or invalid values
library(dplyr)
nypd_data_filtered <- nypd_data %>%
select(Longitude, Latitude, INCIDENT_KEY) %>%
filter(!is.na(Longitude) & !is.na(Latitude) & Longitude >= -180 & Longitude <= 180 & Latitude >= -90 & Latitude <= 90)
head(nypd_data_filtered, 5)
library(shiny)
library(leaflet)
# Select relevant columns and filter out rows with NA or invalid values
library(dplyr)
nypd_data_filtered_year <- nypd_data %>%
select(Longitude, Latitude, INCIDENT_KEY, OCCUR_DATE) %>%
filter(!is.na(Longitude) & !is.na(Latitude) & Longitude >= -180 & Longitude <= 180 & Latitude >= -90 & Latitude <= 90)
# Convert OCCUR_DATE to Date type and extract year
nypd_data_filtered_year$OCCUR_DATE <- as.Date(nypd_data_filtered$OCCUR_DATE, format="%m/%d/%Y")
library(shiny)
library(leaflet)
# Select relevant columns and filter out rows with NA or invalid values
library(dplyr)
nypd_data_filtered_year <- nypd_data %>%
select(Longitude, Latitude, INCIDENT_KEY, OCCUR_DATE) %>%
filter(!is.na(Longitude) & !is.na(Latitude) & Longitude >= -180 & Longitude <= 180 & Latitude >= -90 & Latitude <= 90)
# Convert OCCUR_DATE to Date type and extract year
nypd_data_filtered_year$OCCUR_DATE <- as.Date(nypd_data_filtered_year$OCCUR_DATE, format="%m/%d/%Y")
nypd_data_filtered_year$year <- format(nypd_data_filtered_year$OCCUR_DATE, "%Y")
# Define UI for application
ui <- fluidPage(
titlePanel("NYPD Shooting Incidents"),
sidebarLayout(
sidebarPanel(
selectInput("year", "Select Year:", choices = unique(nypd_data_filtered_year$year), selected = unique(nypd_data_filtered_year$year)[1])
),
mainPanel(
leafletOutput("map")
)
)
)
# Define server logic
server <- function(input, output, session) {
filtered_data <- reactive({
nypd_data_filtered %>% filter(year == input$year)
})
output$map <- renderLeaflet({
leaflet(filtered_data()) %>%
addTiles() %>%
addCircleMarkers(~Longitude, ~Latitude, popup = ~as.character(INCIDENT_KEY), color = "red", radius = 5)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(leaflet)
# Select relevant columns and filter out rows with NA or invalid values
library(dplyr)
nypd_data_filtered_year <- nypd_data %>%
select(Longitude, Latitude, INCIDENT_KEY, OCCUR_DATE) %>%
filter(!is.na(Longitude) & !is.na(Latitude) & !is.na(OCCUR_DATE) & Longitude >= -180 & Longitude <= 180 & Latitude >= -90 & Latitude <= 90)
# Convert OCCUR_DATE to Date type and extract year
nypd_data_filtered_year$OCCUR_DATE <- as.Date(nypd_data_filtered_year$OCCUR_DATE, format="%m/%d/%Y")
nypd_data_filtered_year$year <- format(nypd_data_filtered_year$OCCUR_DATE, "%Y")
# Define UI for application
ui <- fluidPage(
titlePanel("NYPD Shooting Incidents"),
sidebarLayout(
sidebarPanel(
selectInput("year", "Select Year:", choices = unique(nypd_data_filtered_year$year), selected = unique(nypd_data_filtered_year$year)[1])
),
mainPanel(
leafletOutput("map")
)
)
)
# Define server logic
server <- function(input, output, session) {
filtered_data <- reactive({
nypd_data_filtered %>% filter(year == input$year)
})
output$map <- renderLeaflet({
leaflet(filtered_data()) %>%
addTiles() %>%
addCircleMarkers(~Longitude, ~Latitude, popup = ~as.character(INCIDENT_KEY), color = "red", radius = 5)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(leaflet)
# Select relevant columns and filter out rows with NA or invalid values
library(dplyr)
nypd_data_filtered_year <- nypd_data %>%
select(Longitude, Latitude, INCIDENT_KEY, OCCUR_DATE) %>%
filter(!is.na(Longitude) & !is.na(Latitude) & !is.na(OCCUR_DATE) & Longitude >= -180 & Longitude <= 180 & Latitude >= -90 & Latitude <= 90)
# Convert OCCUR_DATE to Date type and extract year
nypd_data_filtered_year$OCCUR_DATE <- as.Date(nypd_data_filtered_year$OCCUR_DATE, format="%m/%d/%Y")
nypd_data_filtered_year$year <- format(nypd_data_filtered_year$OCCUR_DATE, "%Y")
# Define UI for application
ui <- fluidPage(
titlePanel("NYPD Shooting Incidents"),
sidebarLayout(
sidebarPanel(
selectInput("year", "Select Year:", choices = unique(nypd_data_filtered_year$year), selected = unique(nypd_data_filtered_year$year)[1])
),
mainPanel(
leafletOutput("map")
)
)
)
# Define server logic
server <- function(input, output, session) {
filtered_data <- reactive({
nypd_data_filtered_year %>% filter(year == input$year)
})
output$map <- renderLeaflet({
leaflet(filtered_data()) %>%
addTiles() %>%
addCircleMarkers(~Longitude, ~Latitude, popup = ~as.character(INCIDENT_KEY), color = "red", radius = 5)
})
}
# Run the application
shinyApp(ui = ui, server = server)
